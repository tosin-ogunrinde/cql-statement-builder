buildscript {
    ext {
        nexusRepo = "${nexusServer}/repository/maven-public"
        sonarQubeGradleVersion = '2.2'
        datastaxCassandraVersion = '2.1.9'
        logbackVersion = '1.1.7'
        powermockVersion = '1.7.0RC2'
    }
    repositories {
        maven { url "${nexusRepo}" }
    }
    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarQubeGradleVersion}")
    }
}

group = 'com.tosinogunrinde.cql'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

repositories {
    maven { url "${nexusRepo}" }
}

dependencies {
    compile group: 'org.reflections', name: 'reflections', version: '0.9.10'
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: "${datastaxCassandraVersion}"
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-mapping', version: "${datastaxCassandraVersion}"
    testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
    testCompile group: 'ch.qos.logback', name: 'logback-core', version: "${logbackVersion}"
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: "${powermockVersion}"
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: "${powermockVersion}"
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
}

def nexusUrl
if (version.endsWith("-SNAPSHOT")) {
    nexusUrl = "${nexusServer}/repository/maven-snapshots"
} else {
    nexusUrl = "${nexusServer}/repository/maven-releases"
}

uploadArchives {
    if (!project.hasProperty("nexusUsername") || !project.hasProperty("nexusPassword")) {
        return
    }
    repositories {
        mavenDeployer {
            repository(url: "${nexusUrl}") {
                authentication(userName: "${nexusUsername}", password: "${nexusPassword}")
            }
            pom.project {
                artifactId = project.name
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}